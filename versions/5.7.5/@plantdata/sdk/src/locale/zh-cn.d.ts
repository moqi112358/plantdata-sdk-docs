declare const _default: {
    common: {
        _de: string;
        add: string;
        addSuccess: string;
        all: string;
        allOptions: string;
        analyse: string;
        and: string;
        apply: string;
        auto: string;
        back: string;
        cancel: string;
        checkAll: string;
        clear: string;
        clearAll: string;
        confirm: string;
        confirmDelete: string;
        confirmDelete$1: string;
        count: string;
        custom: string;
        defaultValue: string;
        delete: string;
        deleteConfirm: string;
        deleteSuccess: string;
        desc: string;
        doNotMerge: string;
        edit: string;
        enlarge: string;
        explore: string;
        export: string;
        equal: string;
        event: string;
        exist: string;
        expandOrCollapse: string;
        filter: string;
        formControlLabel: {
            checkbox: string;
            date: string;
            dateRange: string;
            datetime: string;
            datetimeRange: string;
            input: string;
            radio: string;
            select: string;
            switch: string;
            group: string;
        };
        fullscreen: string;
        greaterThan: string;
        greaterThanOrEqualTo: string;
        gt: string;
        gte: string;
        hide: string;
        href: string;
        image: string;
        is: string;
        inDataLoading: string;
        inLoading: string;
        isEqual: string;
        isNot: string;
        keyword: string;
        latitude: string;
        longitude: string;
        lessThan: string;
        lessThanOrEqualTo: string;
        lt: string;
        lte: string;
        max: string;
        merge: string;
        min: string;
        more: string;
        must: string;
        name: string;
        neq: string;
        no: string;
        notEqual: string;
        notExist: string;
        object: string;
        optional: string;
        options: string;
        off: string;
        on: string;
        or: string;
        other: string;
        play: string;
        preview: string;
        range: string;
        rename: string;
        required: string;
        run: string;
        section: string;
        selectAll: string;
        serialNumber: string;
        showOrHide: string;
        show: string;
        showAll: string;
        source: string;
        stat: string;
        statistics: string;
        stop: string;
        timeLabel: {
            date: string;
            hour: string;
            minute: string;
            month: string;
            quarter: string;
            second: string;
            year: string;
        };
        title: string;
        to: string;
        toolbar: string;
        type: string;
        unknow: string;
        update: string;
        updateSuccess: string;
        view: string;
        yes: string;
    };
    error: {
        $1GetterCannotBeFound: string;
        $1IsRequire: string;
        $1IsError: string;
        $1SetterCannotBeFound: string;
        addDisabled: string;
        attributeIsRequire: string;
        analyseTargetIsRequire: string;
        cannotBeNull: string;
        cannotFindParent: string;
        conceptIsRequire: string;
        conceptNameCannotBeNull: string;
        conceptNameIsError: string;
        conceptNameIsRequire: string;
        configError: string;
        countIsRequire: string;
        countMustBeInteger: string;
        countMustGreaterThanOrEqualTo$1AndLessThanOrEqualTo$2: string;
        countMustBeNumber: string;
        currentPageCannotBeGreaterThanTotalPage: string;
        dataRequestFailed: string;
        dataError: string;
        entityCannotBeNull: string;
        entityNameCannotBeNull: string;
        exportFailedForNoImageCrossDomainIsSupport: string;
        gisInfoCannotBeNull: string;
        failed: string;
        formatError: string;
        formIsNotFinish: string;
        fromAndToCannotBeNull: string;
        fromCannotBeSameAsTo: string;
        fromIsRequire: string;
        keywordIsRequire: string;
        labelIsRequire: string;
        noData: string;
        noEntityCanBeSelected: string;
        noLessThanTwoObjectsCanBeAnalyzed: string;
        noMatchItem: string;
        onOption: string;
        noRelationCanBeSelected: string;
        noSchema: string;
        noStatData: string;
        noItemCanBeStat: string;
        noDataAttributeCanBeStatInSelectedConcept: string;
        noObjectAttributeCanBeStatInSelectedConcept: string;
        noEdgeDataAttributeCanBeStatInSelectedRelation: string;
        notSupport: string;
        parentConceptCannotBeNull: string;
        pathRequestTwoEntities: string;
        relationConfigIsRequire: string;
        relationIsUnknow: string;
        relationNameIsRequire: string;
        relationRequestAtLeastTwoEntities: string;
        requestIsBlocked: string;
        ruleSettingsFormIsError: string;
        selectOneItemBeforeClickAdd: string;
        selectedEntityIsRepeated: string;
        selectedEntityIsUpToTheUpperLimit: string;
        selectedInvalid: string;
        selectedPageCannotFound: string;
        selectorIsRequire: string;
        statEntityIsRequire: string;
        statNameIsRequire: string;
        statRelationsIsRequire: string;
        statTypeIsRequire: string;
        syntaxError$1: string;
        timeIsInvalid: string;
        totalOrTotalItemAndPageSizeCannotBeNullAtSameTime: string;
        unknow: string;
        unknowError: string;
        unsupportedType: string;
        xAxisIsRequire: string;
        yAxisIsRequire: string;
    };
    graph: {
        attribute: string;
        backward: string;
        className: string;
        concept: string;
        dataAttribute: string;
        dataType: string;
        dataTypeMap: {
            integer: string;
            float: string;
            datetime: string;
            date: string;
            time: string;
            varchar: string;
            computed: string;
            Map: string;
            text: string;
            href: string;
        };
        dataUnit: string;
        define: string;
        domain: string;
        direction: string;
        edgeDataAttribute: string;
        edgeObjectAttribute: string;
        endTime: string;
        entity: string;
        event: string;
        forward: string;
        from: string;
        hypermymyAndHyponymy: string;
        infobox: string;
        instance: string;
        meaningTag: string;
        name: string;
        notSingeType: string;
        objectAttribute: string;
        private: string;
        privateRelation: string;
        range: string;
        relation: string;
        singleType: string;
        startTime: string;
        to: string;
        type: string;
        twoWay: string;
        undirected: string;
        vague: string;
    };
    infobox: {
        close: string;
        entityLabel: string;
        label: string;
        level: string;
        level1: string;
        level2: string;
        level3: string;
        level4: string;
        level5: string;
        noOtherData: string;
        parent: string;
        public: string;
        readFailed: string;
        reason: string;
        related: string;
        relatedEntities: string;
        relatedResources: string;
        selectAnEntity: string;
        showAll: string;
        time: string;
    };
    menuItem: {
        addOtherGraph: string;
        applyStyle: string;
        backgroundSize: string;
        backgroundSizeAuto: string;
        backgroundSizeCover: string;
        backgroundSizeContain: string;
        backgroundUrl: string;
        businessRule: string;
        closeNode: string;
        collapseNode: string;
        commonConfig: string;
        editor: string;
        embedNodeLabel: string;
        emphasisLink: string;
        emphasisNode: string;
        explore: string;
        expandNode: string;
        focusNode: string;
        graph: string;
        hideLink: string;
        hideLinkLabel: string;
        hideNode: string;
        hideNodeImage: string;
        hideNodeLabel: string;
        jumpTo: string;
        linkConfig: string;
        linkEmphasisColor: string;
        linkEmphasisRadiusRatio: string;
        linkReduceColor: string;
        linkReduceRadiusRatio: string;
        linkStyleConfig: string;
        lockNode: string;
        nodeConfig: string;
        nodeEmphasisColor: string;
        nodeEmphasisRadiusRatio: string;
        nodeReduceColor: string;
        nodeReduceRadiusRatio: string;
        nodeStyleConfig: string;
        outputNodeLabel: string;
        path: string;
        pathTiming: string;
        reduceLink: string;
        reduceNode: string;
        relation: string;
        relationTiming: string;
        revertStyle: string;
        showAllRelatedLinks: string;
        showLink: string;
        showLinkLabel: string;
        showNode: string;
        showNodeImage: string;
        showNodeLabel: string;
        timing: string;
        unemphasisLink: string;
        unemphasisNode: string;
        unlockNode: string;
        unreduceLink: string;
        unreduceNode: string;
        visualEdit: string;
    };
    other: {
        autocomplete: {
            keyword: string;
            noData: string;
        };
        cluster: string;
        clusterStats: string;
        collapse: string;
        collapseTools: string;
        conceptVisualization: string;
        expand: string;
        expandTools: string;
        fieldName: string;
        graphView: string;
        horizontalView: string;
        input: string;
        inputType: string;
        isDisabled: string;
        isEditable: string;
        isDeletable: string;
        isRequire: string;
        labelModel: string;
        modelVisualization: string;
        multiSelect: string;
        noAnswer: string;
        number: string;
        openOrClose: string;
        pagination: {
            first: string;
            jumpTo: string;
            last: string;
            page: string;
            prev: string;
            prev$1Page: string;
            next: string;
            next$1Page: string;
            total$1: string;
        };
        placeholderModel: string;
        reason: string;
        relatedNodesCount: string;
        saveValue: string;
        select: string;
        setFocus: string;
        showModel: string;
        showName: string;
        showRelation: string;
        showValue: string;
        studyOnly: string;
        text: string;
        time: string;
        topNodes: string;
        verticalView: string;
    };
    plugin: {
        areaSelection: {
            areaSelection: string;
            dragMap: string;
            circleSelector: string;
            rectSelector: string;
        };
        attValueRule: {
            all: string;
            attributeFilter: string;
            configIsNeed: string;
            entityNoDataTip: string;
            entityNoAttributeValue: string;
            equalConditionCannotEmpty: string;
            existConditionCannotEmpty: string;
            loadAttributeFailed: string;
            maxMustGreaterThenMin: string;
            minMaxCannotEmpty: string;
            noCondition: string;
            notEqualConditionCannotEmpty: string;
            notExistConditionCannotEmpty: string;
            notSpecified: string;
            relationFilter: string;
            relationNoAttributeValue: string;
            relationNoDataTip: string;
            secondFilter: string;
            selectedRangeIsEmpty: string;
            unknowType: string;
        };
        changeLayout: {
            changeLayout: string;
            force: string;
            radial: string;
            tree: string;
            reverseTree: string;
            none: string;
        };
        cluster: {
            cluster: string;
        };
        connects: {
            _t: string;
            all: string;
            connects: string;
            path: string;
            step: string;
        };
        contextmenu: {
            entityEdit: string;
            entityStyle: string;
            other: string;
            relationEdit: string;
            relationStyle: string;
        };
        editor: {
            addAttribute: string;
            addAttributeGroup: string;
            addAttributeGroupSuccess: string;
            addAttributeInTo$1: string;
            addPrivateAttribute: string;
            addRelation: string;
            attributeCount$1: string;
            attributeDefine: string;
            attributeEdit: string;
            attributeName: string;
            attributeNameIsRequire: string;
            attributeType: string;
            attributeGroup: string;
            attributeGroupDelete: string;
            attributeGroupName: string;
            clickToAddPrivateAttribute: string;
            childConcept: string;
            childConceptAddSuccess: string;
            childConceptDeleteSuccess: string;
            concept: string;
            conceptName: string;
            conceptNameUpdateSuccess: string;
            continue: string;
            confirmDelete$3RelationBetween$1$2: string;
            createPrivateRelation: string;
            dataAttributeName: string;
            dataValue: string;
            deleteAttributeGroup: string;
            deleteAttributeGroupSuccess: string;
            descUpdateSuccess: string;
            editor: string;
            entityName: string;
            entityNameUpdateSuccess: string;
            edgeAttributeEdit: string;
            gisInfo: string;
            gisInfoUpdateSuccess: string;
            hrefInput: string;
            hrefNameInput: string;
            imageUpdateSuccess: string;
            inputName$1ToConfirmDelete: string;
            meaningTagUpdateSuccess: string;
            moreRelation: string;
            nameIsRequire: string;
            newAttributeGroup: string;
            newRelationType: string;
            parentConcept: string;
            parentConceptAddSuccess: string;
            parentConceptDeleteSuccess: string;
            privateAttributeAddSuccess: string;
            privateRelationName: string;
            relationAddSuccess: string;
            relationDefine: string;
            relationMerge: string;
            relationName: string;
            relationType: string;
            reliability: string;
            reliabilityInput: string;
            reliabilityValueMustInZeroToOne: string;
            renameAttributeGroup: string;
            sameParentConcept: string;
            sameParentEntity: string;
            score: string;
            scoreInput: string;
            scoreValueMustInZeroToOne: string;
            selectAttribute: string;
            showName: string;
            showNameInput: string;
            sourceInput: string;
            startEndTime: string;
            subConcept: string;
            updateAttributeGroupSuccess: string;
            useCommaToSeparateMultipleConceptName: string;
            useCommaToSeparateMultipleEntityName: string;
            useCommaToSeparateMultipleMeaningTag: string;
        };
        event: {
            eventCount: string;
            eventList: string;
            to: string;
            unknowEvent: string;
        };
        filter: {
            addRule: string;
            allowAttrGroups: string;
            allowAtts: string;
            allowTypes: string;
            attAttFilters: string;
            close: string;
            custom: {
                distance: string;
            };
            direction: string;
            distance: string;
            distanceExpend: string;
            doNotMerge: string;
            explore: {
                distance: string;
            };
            filter: string;
            filterableAttributeOrRelationIsNotExist: string;
            graph: {
                distance: string;
            };
            highLevelSize: string;
            hyponymyDistance: string;
            level: string;
            merge: string;
            path: {
                distance: string;
            };
            relation: {
                distance: string;
            };
            relationMerge: string;
            reliability: string;
            score: string;
            showAll: string;
        };
        find: {
            find: string;
            inputNodeName: string;
        };
        history: {
            history: string;
        };
        inference: {
            addRule: string;
            addRuleField: string;
            date: string;
            dateRange: string;
            datetime: string;
            datetimeRange: string;
            default: string;
            false: string;
            field: string;
            name: string;
            relationConfig: string;
            relationName: string;
            relationReasoning: string;
            relationSettings: string;
            required: string;
            ruleDeleteConfirm: string;
            settings: string;
            text: string;
            true: string;
            type: string;
        };
        infobox: {
            infobox: string;
        };
        legend: {
            legend: string;
        };
        mixins: {
            mixins: string;
        };
        model: {
            add: string;
            addEntity: string;
            analysisEntity: string;
            end: string;
            from: string;
            graph: string;
            path: string;
            relation: string;
            thenClick: string;
            twoOrMoreEntitiesIsRequire: string;
        };
        page: {
            customPageSize: string;
            dataLoadingTryLater: string;
            noMoreData: string;
            next: string;
            page: string;
            prev: string;
            eachPage: string;
            thisIsTheFirstPage: string;
        };
        prompt: {
            advancedPrompt: string;
            prompt: string;
            promptMulti: string;
            add: string;
            added: string;
            addRule: string;
            in: string;
            inputSearchKeyword: string;
            keyword: string;
            registeredCapital: string;
            resultIsNotFound: string;
            rule: string;
            searchKeyword: string;
            searchResult: string;
            searchRule: string;
            selectedAnalysisEntities: string;
        };
        resetLayout: {
            resetLayout: string;
        };
        searchPlace: {
            searchPlace: string;
            place: string;
        };
        snapshot: {
            noSnapshots: string;
            saveSnapshot: string;
            snapshot: string;
            takeSnapshot: string;
        };
        stat: {
            addAnalysis: string;
            addStat: string;
            addStatSuccess: string;
            applyAll: string;
            applyToAllAnalysis: string;
            applyCurrent: string;
            autoMergeByRange: string;
            bar: string;
            chartType: string;
            concept: string;
            configIsNeed: string;
            entitiesInAllConcept: string;
            line: string;
            modifyAnalysis: string;
            stat: string;
            statName: string;
            statEntity: string;
            statEntityAttributeValue: string;
            statEntityConcept: string;
            statRelationAttributeValue: string;
            statRelationType: string;
            statFilter: string;
            statRelations: string;
            statType: string;
            timeInterval: string;
            tryThisAfterConfigIsComplete: string;
        };
        tagInfo: {
            tagInfo: string;
            label: string;
            reason: string;
            time: string;
        };
        tagView: {
            tagView: string;
        };
        timeChart: {
            analysisTarget: string;
            emphasisEntitiesAlwaysVisible: string;
            emphasisRelationsAlwaysVisible: string;
            eventCount: string;
            eventStat: string;
            noTimeEntitiesAlwaysVisible: string;
            noTimeRelationsAlwaysVisible: string;
            targetsNotInSelection: string;
            timeChartConfig: string;
            timeRange: string;
        };
        trace: {
            addRule: string;
            addRuleField: string;
            date: string;
            dateRange: string;
            datetime: string;
            datetimeRange: string;
            default: string;
            entitySelect: string;
            false: string;
            field: string;
            name: string;
            ruleConfig: string;
            ruleName: string;
            ruleSettings: string;
            required: string;
            ruleDeleteConfirm: string;
            settings: string;
            text: string;
            traceAnalysis: string;
            true: string;
            type: string;
        };
        traceEvent: {
            GISInfo: string;
            traceEvent: string;
        };
        visConfigure: {
            arrow: string;
            border: string;
            color: string;
            crop: string;
            displayValue: string;
            icon: string;
            image: string;
            inner: string;
            inputNodeLabel: string;
            label: string;
            labelColor: string;
            length: string;
            link: string;
            linkLength: string;
            linkStyle: string;
            linkVisualConfigure: string;
            node: string;
            nodeLabel: string;
            nodeSpacing: string;
            nodeStyle: string;
            nodeVisualConfigure: string;
            outputNodeLabel: string;
            radius: string;
            rowSpacing: string;
            text: string;
            vague: string;
            visualConfigure: string;
            width: string;
        };
    };
    view: {
        data: {
            dataList: string;
            dataView: string;
            detail: string;
            entitiesCount: string;
            relationsCount: string;
        };
        tree: {
            treeView: string;
        };
        wordCloud: {
            wordCloud: string;
        };
    };
    zcchart: {
        closeButton: string;
        dataRequestFailed: string;
        loadingLabel: string;
        menu: {
            collapse: string;
            close: string;
            dynamic: string;
            expand: string;
            fixed: string;
            focus: string;
            hide: string;
            unfocus: string;
        };
        toolbar: {
            backButton: string;
            backTitle: string;
            exportButton: string;
            exportCSV: string;
            exportJpeg: string;
            exportPDF: string;
            exportPNG: string;
            exportTitle: string;
            exportXLS: string;
            fitButton: string;
            fitTitle: string;
            freezeButton: string;
            freezeTitle: string;
            fullscreenButton: string;
            fullscreenTitle: string;
            rearrangeButton: string;
            rearrangeTitle: string;
            unfreezeTitle: string;
            zoomoutButton: string;
            zoomoutTitle: string;
        };
    };
};
export default _default;
